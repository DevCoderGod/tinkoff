// @generated by protobuf-ts 2.8.2 with parameter long_type_string
// @generated from protobuf file "orders.proto" (package "tinkoff.public.invest.api.contract.v1", syntax proto3)
// tslint:disable
import { OrdersService } from "./orders.js";
import type { ReplaceOrderRequest } from "./orders.js";
import type { GetOrdersResponse } from "./orders.js";
import type { GetOrdersRequest } from "./orders.js";
import type { OrderState } from "./orders.js";
import type { GetOrderStateRequest } from "./orders.js";
import type { CancelOrderResponse } from "./orders.js";
import type { CancelOrderRequest } from "./orders.js";
import type { PostOrderResponse } from "./orders.js";
import type { PostOrderRequest } from "./orders.js";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { OrdersStreamService } from "./orders.js";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TradesStreamResponse } from "./orders.js";
import type { TradesStreamRequest } from "./orders.js";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service tinkoff.public.invest.api.contract.v1.OrdersStreamService
 */
export interface IOrdersStreamServiceClient {
    /**
     * Stream сделок пользователя
     *
     * @generated from protobuf rpc: TradesStream(tinkoff.public.invest.api.contract.v1.TradesStreamRequest) returns (stream tinkoff.public.invest.api.contract.v1.TradesStreamResponse);
     */
    tradesStream(input: TradesStreamRequest, options?: RpcOptions): ServerStreamingCall<TradesStreamRequest, TradesStreamResponse>;
}
/**
 * @generated from protobuf service tinkoff.public.invest.api.contract.v1.OrdersStreamService
 */
export class OrdersStreamServiceClient implements IOrdersStreamServiceClient, ServiceInfo {
    typeName = OrdersStreamService.typeName;
    methods = OrdersStreamService.methods;
    options = OrdersStreamService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Stream сделок пользователя
     *
     * @generated from protobuf rpc: TradesStream(tinkoff.public.invest.api.contract.v1.TradesStreamRequest) returns (stream tinkoff.public.invest.api.contract.v1.TradesStreamResponse);
     */
    tradesStream(input: TradesStreamRequest, options?: RpcOptions): ServerStreamingCall<TradesStreamRequest, TradesStreamResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TradesStreamRequest, TradesStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
/**
 * Сервис предназначен для работы с торговыми поручениями:</br> **1**.
 * выставление;</br> **2**. отмена;</br> **3**. получение статуса;</br> **4**.
 * расчёт полной стоимости;</br> **5**. получение списка заявок.
 *
 * @generated from protobuf service tinkoff.public.invest.api.contract.v1.OrdersService
 */
export interface IOrdersServiceClient {
    /**
     * Метод выставления заявки.
     *
     * @generated from protobuf rpc: PostOrder(tinkoff.public.invest.api.contract.v1.PostOrderRequest) returns (tinkoff.public.invest.api.contract.v1.PostOrderResponse);
     */
    postOrder(input: PostOrderRequest, options?: RpcOptions): UnaryCall<PostOrderRequest, PostOrderResponse>;
    /**
     * Метод отмены биржевой заявки.
     *
     * @generated from protobuf rpc: CancelOrder(tinkoff.public.invest.api.contract.v1.CancelOrderRequest) returns (tinkoff.public.invest.api.contract.v1.CancelOrderResponse);
     */
    cancelOrder(input: CancelOrderRequest, options?: RpcOptions): UnaryCall<CancelOrderRequest, CancelOrderResponse>;
    /**
     * Метод получения статуса торгового поручения.
     *
     * @generated from protobuf rpc: GetOrderState(tinkoff.public.invest.api.contract.v1.GetOrderStateRequest) returns (tinkoff.public.invest.api.contract.v1.OrderState);
     */
    getOrderState(input: GetOrderStateRequest, options?: RpcOptions): UnaryCall<GetOrderStateRequest, OrderState>;
    /**
     * Метод получения списка активных заявок по счёту.
     *
     * @generated from protobuf rpc: GetOrders(tinkoff.public.invest.api.contract.v1.GetOrdersRequest) returns (tinkoff.public.invest.api.contract.v1.GetOrdersResponse);
     */
    getOrders(input: GetOrdersRequest, options?: RpcOptions): UnaryCall<GetOrdersRequest, GetOrdersResponse>;
    /**
     * Метод изменения выставленной заявки.
     *
     * @generated from protobuf rpc: ReplaceOrder(tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest) returns (tinkoff.public.invest.api.contract.v1.PostOrderResponse);
     */
    replaceOrder(input: ReplaceOrderRequest, options?: RpcOptions): UnaryCall<ReplaceOrderRequest, PostOrderResponse>;
}
/**
 * Сервис предназначен для работы с торговыми поручениями:</br> **1**.
 * выставление;</br> **2**. отмена;</br> **3**. получение статуса;</br> **4**.
 * расчёт полной стоимости;</br> **5**. получение списка заявок.
 *
 * @generated from protobuf service tinkoff.public.invest.api.contract.v1.OrdersService
 */
export class OrdersServiceClient implements IOrdersServiceClient, ServiceInfo {
    typeName = OrdersService.typeName;
    methods = OrdersService.methods;
    options = OrdersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Метод выставления заявки.
     *
     * @generated from protobuf rpc: PostOrder(tinkoff.public.invest.api.contract.v1.PostOrderRequest) returns (tinkoff.public.invest.api.contract.v1.PostOrderResponse);
     */
    postOrder(input: PostOrderRequest, options?: RpcOptions): UnaryCall<PostOrderRequest, PostOrderResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostOrderRequest, PostOrderResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Метод отмены биржевой заявки.
     *
     * @generated from protobuf rpc: CancelOrder(tinkoff.public.invest.api.contract.v1.CancelOrderRequest) returns (tinkoff.public.invest.api.contract.v1.CancelOrderResponse);
     */
    cancelOrder(input: CancelOrderRequest, options?: RpcOptions): UnaryCall<CancelOrderRequest, CancelOrderResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CancelOrderRequest, CancelOrderResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Метод получения статуса торгового поручения.
     *
     * @generated from protobuf rpc: GetOrderState(tinkoff.public.invest.api.contract.v1.GetOrderStateRequest) returns (tinkoff.public.invest.api.contract.v1.OrderState);
     */
    getOrderState(input: GetOrderStateRequest, options?: RpcOptions): UnaryCall<GetOrderStateRequest, OrderState> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOrderStateRequest, OrderState>("unary", this._transport, method, opt, input);
    }
    /**
     * Метод получения списка активных заявок по счёту.
     *
     * @generated from protobuf rpc: GetOrders(tinkoff.public.invest.api.contract.v1.GetOrdersRequest) returns (tinkoff.public.invest.api.contract.v1.GetOrdersResponse);
     */
    getOrders(input: GetOrdersRequest, options?: RpcOptions): UnaryCall<GetOrdersRequest, GetOrdersResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOrdersRequest, GetOrdersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Метод изменения выставленной заявки.
     *
     * @generated from protobuf rpc: ReplaceOrder(tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest) returns (tinkoff.public.invest.api.contract.v1.PostOrderResponse);
     */
    replaceOrder(input: ReplaceOrderRequest, options?: RpcOptions): UnaryCall<ReplaceOrderRequest, PostOrderResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReplaceOrderRequest, PostOrderResponse>("unary", this._transport, method, opt, input);
    }
}
