// @generated by protobuf-ts 2.8.2 with parameter long_type_string
// @generated from protobuf file "stoporders.proto" (package "tinkoff.public.invest.api.contract.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StopOrdersService } from "./stoporders.js";
import type { CancelStopOrderResponse } from "./stoporders.js";
import type { CancelStopOrderRequest } from "./stoporders.js";
import type { GetStopOrdersResponse } from "./stoporders.js";
import type { GetStopOrdersRequest } from "./stoporders.js";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PostStopOrderResponse } from "./stoporders.js";
import type { PostStopOrderRequest } from "./stoporders.js";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Сервис предназначен для работы со стоп-заявками:</br> **1**.
 * выставление;</br> **2**. отмена;</br> **3**. получение списка стоп-заявок.
 *
 * @generated from protobuf service tinkoff.public.invest.api.contract.v1.StopOrdersService
 */
export interface IStopOrdersServiceClient {
    /**
     * Метод выставления стоп-заявки.
     *
     * @generated from protobuf rpc: PostStopOrder(tinkoff.public.invest.api.contract.v1.PostStopOrderRequest) returns (tinkoff.public.invest.api.contract.v1.PostStopOrderResponse);
     */
    postStopOrder(input: PostStopOrderRequest, options?: RpcOptions): UnaryCall<PostStopOrderRequest, PostStopOrderResponse>;
    /**
     * Метод получения списка активных стоп заявок по счёту.
     *
     * @generated from protobuf rpc: GetStopOrders(tinkoff.public.invest.api.contract.v1.GetStopOrdersRequest) returns (tinkoff.public.invest.api.contract.v1.GetStopOrdersResponse);
     */
    getStopOrders(input: GetStopOrdersRequest, options?: RpcOptions): UnaryCall<GetStopOrdersRequest, GetStopOrdersResponse>;
    /**
     * Метод отмены стоп-заявки.
     *
     * @generated from protobuf rpc: CancelStopOrder(tinkoff.public.invest.api.contract.v1.CancelStopOrderRequest) returns (tinkoff.public.invest.api.contract.v1.CancelStopOrderResponse);
     */
    cancelStopOrder(input: CancelStopOrderRequest, options?: RpcOptions): UnaryCall<CancelStopOrderRequest, CancelStopOrderResponse>;
}
/**
 * Сервис предназначен для работы со стоп-заявками:</br> **1**.
 * выставление;</br> **2**. отмена;</br> **3**. получение списка стоп-заявок.
 *
 * @generated from protobuf service tinkoff.public.invest.api.contract.v1.StopOrdersService
 */
export class StopOrdersServiceClient implements IStopOrdersServiceClient, ServiceInfo {
    typeName = StopOrdersService.typeName;
    methods = StopOrdersService.methods;
    options = StopOrdersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Метод выставления стоп-заявки.
     *
     * @generated from protobuf rpc: PostStopOrder(tinkoff.public.invest.api.contract.v1.PostStopOrderRequest) returns (tinkoff.public.invest.api.contract.v1.PostStopOrderResponse);
     */
    postStopOrder(input: PostStopOrderRequest, options?: RpcOptions): UnaryCall<PostStopOrderRequest, PostStopOrderResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostStopOrderRequest, PostStopOrderResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Метод получения списка активных стоп заявок по счёту.
     *
     * @generated from protobuf rpc: GetStopOrders(tinkoff.public.invest.api.contract.v1.GetStopOrdersRequest) returns (tinkoff.public.invest.api.contract.v1.GetStopOrdersResponse);
     */
    getStopOrders(input: GetStopOrdersRequest, options?: RpcOptions): UnaryCall<GetStopOrdersRequest, GetStopOrdersResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStopOrdersRequest, GetStopOrdersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Метод отмены стоп-заявки.
     *
     * @generated from protobuf rpc: CancelStopOrder(tinkoff.public.invest.api.contract.v1.CancelStopOrderRequest) returns (tinkoff.public.invest.api.contract.v1.CancelStopOrderResponse);
     */
    cancelStopOrder(input: CancelStopOrderRequest, options?: RpcOptions): UnaryCall<CancelStopOrderRequest, CancelStopOrderResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CancelStopOrderRequest, CancelStopOrderResponse>("unary", this._transport, method, opt, input);
    }
}
