// @generated by protobuf-ts 2.8.2 with parameter long_type_string
// @generated from protobuf file "sandbox.proto" (package "tinkoff.public.invest.api.contract.v1", syntax proto3)
// tslint:disable
import { WithdrawLimitsResponse } from "./operations";
import { WithdrawLimitsRequest } from "./operations";
import { PortfolioResponse } from "./operations";
import { PortfolioRequest } from "./operations";
import { GetOperationsByCursorResponse } from "./operations";
import { GetOperationsByCursorRequest } from "./operations";
import { OperationsResponse } from "./operations";
import { OperationsRequest } from "./operations";
import { PositionsResponse } from "./operations";
import { PositionsRequest } from "./operations";
import { OrderState } from "./orders";
import { GetOrderStateRequest } from "./orders";
import { CancelOrderResponse } from "./orders";
import { CancelOrderRequest } from "./orders";
import { GetOrdersResponse } from "./orders";
import { GetOrdersRequest } from "./orders";
import { ReplaceOrderRequest } from "./orders";
import { PostOrderResponse } from "./orders";
import { PostOrderRequest } from "./orders";
import { GetAccountsResponse } from "./users";
import { GetAccountsRequest } from "./users";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MoneyValue } from "./common";
/**
 * Запрос открытия счёта в песочнице.
 *
 * пустой запрос
 *
 * @generated from protobuf message tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest
 */
export interface OpenSandboxAccountRequest {
}
/**
 * Номер открытого счёта в песочнице.
 *
 * @generated from protobuf message tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse
 */
export interface OpenSandboxAccountResponse {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string; // Номер счёта
}
/**
 * Запрос закрытия счёта в песочнице.
 *
 * @generated from protobuf message tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest
 */
export interface CloseSandboxAccountRequest {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string; // Номер счёта
}
/**
 * Результат закрытия счёта в песочнице.
 *
 * пустой ответ
 *
 * @generated from protobuf message tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse
 */
export interface CloseSandboxAccountResponse {
}
/**
 * Запрос пополнения счёта в песочнице.
 *
 * @generated from protobuf message tinkoff.public.invest.api.contract.v1.SandboxPayInRequest
 */
export interface SandboxPayInRequest {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string; // Номер счёта
    /**
     * @generated from protobuf field: tinkoff.public.invest.api.contract.v1.MoneyValue amount = 2;
     */
    amount?: MoneyValue; // Сумма пополнения счёта в рублях
}
/**
 * Результат пополнения счёта, текущий баланс.
 *
 * @generated from protobuf message tinkoff.public.invest.api.contract.v1.SandboxPayInResponse
 */
export interface SandboxPayInResponse {
    /**
     * @generated from protobuf field: tinkoff.public.invest.api.contract.v1.MoneyValue balance = 1;
     */
    balance?: MoneyValue; // Текущий баланс счёта
}
// @generated message type with reflection information, may provide speed optimized methods
class OpenSandboxAccountRequest$Type extends MessageType<OpenSandboxAccountRequest> {
    constructor() {
        super("tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest", []);
    }
    create(value?: PartialMessage<OpenSandboxAccountRequest>): OpenSandboxAccountRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenSandboxAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenSandboxAccountRequest): OpenSandboxAccountRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OpenSandboxAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest
 */
export const OpenSandboxAccountRequest = new OpenSandboxAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenSandboxAccountResponse$Type extends MessageType<OpenSandboxAccountResponse> {
    constructor() {
        super("tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OpenSandboxAccountResponse>): OpenSandboxAccountResponse {
        const message = { accountId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenSandboxAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenSandboxAccountResponse): OpenSandboxAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenSandboxAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse
 */
export const OpenSandboxAccountResponse = new OpenSandboxAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloseSandboxAccountRequest$Type extends MessageType<CloseSandboxAccountRequest> {
    constructor() {
        super("tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CloseSandboxAccountRequest>): CloseSandboxAccountRequest {
        const message = { accountId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CloseSandboxAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CloseSandboxAccountRequest): CloseSandboxAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CloseSandboxAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest
 */
export const CloseSandboxAccountRequest = new CloseSandboxAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloseSandboxAccountResponse$Type extends MessageType<CloseSandboxAccountResponse> {
    constructor() {
        super("tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse", []);
    }
    create(value?: PartialMessage<CloseSandboxAccountResponse>): CloseSandboxAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CloseSandboxAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CloseSandboxAccountResponse): CloseSandboxAccountResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CloseSandboxAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse
 */
export const CloseSandboxAccountResponse = new CloseSandboxAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SandboxPayInRequest$Type extends MessageType<SandboxPayInRequest> {
    constructor() {
        super("tinkoff.public.invest.api.contract.v1.SandboxPayInRequest", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "message", T: () => MoneyValue }
        ]);
    }
    create(value?: PartialMessage<SandboxPayInRequest>): SandboxPayInRequest {
        const message = { accountId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SandboxPayInRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SandboxPayInRequest): SandboxPayInRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                case /* tinkoff.public.invest.api.contract.v1.MoneyValue amount */ 2:
                    message.amount = MoneyValue.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SandboxPayInRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        /* tinkoff.public.invest.api.contract.v1.MoneyValue amount = 2; */
        if (message.amount)
            MoneyValue.internalBinaryWrite(message.amount, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tinkoff.public.invest.api.contract.v1.SandboxPayInRequest
 */
export const SandboxPayInRequest = new SandboxPayInRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SandboxPayInResponse$Type extends MessageType<SandboxPayInResponse> {
    constructor() {
        super("tinkoff.public.invest.api.contract.v1.SandboxPayInResponse", [
            { no: 1, name: "balance", kind: "message", T: () => MoneyValue }
        ]);
    }
    create(value?: PartialMessage<SandboxPayInResponse>): SandboxPayInResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SandboxPayInResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SandboxPayInResponse): SandboxPayInResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tinkoff.public.invest.api.contract.v1.MoneyValue balance */ 1:
                    message.balance = MoneyValue.internalBinaryRead(reader, reader.uint32(), options, message.balance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SandboxPayInResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tinkoff.public.invest.api.contract.v1.MoneyValue balance = 1; */
        if (message.balance)
            MoneyValue.internalBinaryWrite(message.balance, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tinkoff.public.invest.api.contract.v1.SandboxPayInResponse
 */
export const SandboxPayInResponse = new SandboxPayInResponse$Type();
/**
 * @generated ServiceType for protobuf service tinkoff.public.invest.api.contract.v1.SandboxService
 */
export const SandboxService = new ServiceType("tinkoff.public.invest.api.contract.v1.SandboxService", [
    { name: "OpenSandboxAccount", options: {}, I: OpenSandboxAccountRequest, O: OpenSandboxAccountResponse },
    { name: "GetSandboxAccounts", options: {}, I: GetAccountsRequest, O: GetAccountsResponse },
    { name: "CloseSandboxAccount", options: {}, I: CloseSandboxAccountRequest, O: CloseSandboxAccountResponse },
    { name: "PostSandboxOrder", options: {}, I: PostOrderRequest, O: PostOrderResponse },
    { name: "ReplaceSandboxOrder", options: {}, I: ReplaceOrderRequest, O: PostOrderResponse },
    { name: "GetSandboxOrders", options: {}, I: GetOrdersRequest, O: GetOrdersResponse },
    { name: "CancelSandboxOrder", options: {}, I: CancelOrderRequest, O: CancelOrderResponse },
    { name: "GetSandboxOrderState", options: {}, I: GetOrderStateRequest, O: OrderState },
    { name: "GetSandboxPositions", options: {}, I: PositionsRequest, O: PositionsResponse },
    { name: "GetSandboxOperations", options: {}, I: OperationsRequest, O: OperationsResponse },
    { name: "GetSandboxOperationsByCursor", options: {}, I: GetOperationsByCursorRequest, O: GetOperationsByCursorResponse },
    { name: "GetSandboxPortfolio", options: {}, I: PortfolioRequest, O: PortfolioResponse },
    { name: "SandboxPayIn", options: {}, I: SandboxPayInRequest, O: SandboxPayInResponse },
    { name: "GetSandboxWithdrawLimits", options: {}, I: WithdrawLimitsRequest, O: WithdrawLimitsResponse }
]);
